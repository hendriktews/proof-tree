#!/bin/bash

#set -x
set -e

commit_changes="yes"
#commit_changes="no"

function usage(){
    echo "usage: make-release [-nochanges]"
    exit 1
}


while [ $# \!= 0 ]; do
    case $1 in
	-nochanges) 	commit_changes="no";
	    		shift;;
	*)		echo `basename $0` : unknown option $1;
		        usage;
			shift;;
    esac;
done


timestamp=$(date '+%Y-%m-%d')

dir="prooftree-$timestamp"

webdir=/home/tews/www/askra-root/software/prooftree

version=$(cat version.txt)

if [ $commit_changes = "yes" ] ; then
    echo
    echo recent change end marker in changes.html on the right spot??
    echo Prepare changes.html for commit?
    echo -n [Y/n]?
    read answer
    if [  ${answer:=y} = n -o $answer = N ] ; then
	commit_changes="no"
    fi
fi

if [ $commit_changes = "yes" ] ; then

    sed -i.$(date +%s)~ \
	-e "s/^<DT>XXXX-XX-XX/<DT>$timestamp: Prooftree $version released/" \
	changes.html

    message="prepare changes.html for release"

    git status
    git diff

    echo
    echo Commit and copy patched [recent-]changes.html : 
    echo 'git add changes.html && git commit -a -m "$message" ?'
    echo -n [Y/n]?
    read answer

    if [  ${answer:=y} = n -o $answer = N ] ; then
	exit 0
    fi

    git add changes.html && git commit -a -m "$message"
    cp changes.html $webdir

    sed -n -e '/RECENT CHANGES START/,/RECENT CHANGES END/p' \
	< changes.html > $webdir/recent-changes.html
fi


#######################################################################
# make source and bin package

rm -f prooftree.man.html
make prooftree.man.html


branch=$(git branch | awk  '/\*/ {print $2;}')
if [ $branch = '(none)' ] ; then
    branch=master
fi

echo using branch $branch

tmpdir=/tmp/tews
name="prooftree-$version"

rm -rf $tmpdir/$name*

git archive --format=tar --prefix=$name/ $branch | (cd $tmpdir; tar -xf - )

filestocopy="prooftree.man.html"

for f in $filestocopy ; do
    cp $f $tmpdir/$name/$f
done

pushd $tmpdir

tar -czf $name.tar.gz $name

popd

builddir="$tmpdir/test-prooftree"
rm -rf $builddir
mkdir -p $builddir

pushd $builddir
tar -xzf $tmpdir/$name.tar.gz
cd $name

set -x
./configure --prefix $builddir/install
set +x

make
if [ $? = 0 ] ; then
    echo =====================================================================
    echo ========= COMPILATION TEST PASSED
    echo =====================================================================
else
    echo =====================================================================
    echo ========= COMPILATION TEST FAILED
    echo =====================================================================
    exit 1
fi

popd


echo
echo copy prooftree.man.html $name.tar.gz
echo to $webdir
echo -n [Y/n]?
read answer

if [  ${answer:=y} = n -o $answer = N ] ; then
    exit 0
fi

cp prooftree.man.html $webdir
cp $tmpdir/$name.tar.gz $webdir/releases

release_tag=prooftree-release-$(echo $version | sed -e 's/\./-/g')

echo
echo Fix source download links in website ?
echo -n [Y/n]?
read answer

if [  ${answer:=y} = n -o $answer = N ] ; then
    exit 0
fi

oldlink=$(sed -n -e '/LATEST VERSION LINK/ {s/<![^>]*>//
       	  	   	   	            s/\[prooftree-//
				            s/.tar.gz\]//
                                            s/>$/>,/
                                            p
				           }' < $webdir/index.shtml)


tgzfile="$name.tar.gz"
newlink="<!-- LATEST VERSION LINK --><A HREF=\"releases/$tgzfile\">[$tgzfile]<\\/A>"

cp $webdir/index.shtml $webdir/index.shtml.$(date +%s)~

sed -e "/LATEST VERSION LINK/ c$newlink" \
    -e "/^<P>Previous versions:/ {p
                             c$oldlink
                            }" \
    -e "/UPDATE VERSION/ s/prooftree_[^-]*-/prooftree_$version-/" \
    < $webdir/index.shtml > $webdir/indexnew.shtml


#diff -u $webdir/index.shtml $webdir/indexnew.shtml
#exit 0

mv $webdir/indexnew.shtml $webdir/index.shtml


git tag $release_tag

echo
echo Upload website?
echo -n [Y/n]?
read answer

if [  ${answer:=y} = n -o $answer = N ] ; then
    exit 0
fi

unison-2.40.102 www


echo
echo bump version number?
echo -n [Y/n]?
read answer

if [  ${answer:=y} = n -o $answer = N ] ; then
    exit 0
fi

pt_old_version=$(sed -e 's/0\.//' < version.txt)
pt_version=$(($pt_old_version + 1))


cp version.txt version.txt.$(date +%s)~
echo 0.$pt_version > version.txt

releasetime=$(TZ=UTC date '+%Y-%m-%d %H:%M:%S %Z')
message="release version 0.$pt_old_version on $releasetime"

git status
git diff

echo
echo git commit -a -m "$message" ??
echo -n [Y/n]?
read answer

if [  ${answer:=y} = n -o $answer = N ] ; then
    exit 0
fi

git commit -a -m "$message"

